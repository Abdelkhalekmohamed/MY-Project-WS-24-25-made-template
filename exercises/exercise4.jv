pipeline UniqueWeatherPipeline {

    // Pipeline structure
    DataFetcher 
        -> ArchiveHandler
        -> CSVSelector 
        -> TextFileProcessor
        -> CSVParser
        -> RenamePrimaryHeaders
        -> AddBatteryTemperatureHeader
        -> UnnecessaryColumnsRemover
        -> DataStructureValidator
        -> ConvertTemperatureToFahrenheit
        -> ConvertBatteryTemperatureToFahrenheit
        -> SaveToSQLite;

    // 1. Download the dataset
    block DataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // 2. Handle the archive extraction
    block ArchiveHandler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Select the target CSV file
    block CSVSelector oftype FilePicker {
        path: "/data.csv";
    }

    // 4. Process raw text file
    block TextFileProcessor oftype TextFileInterpreter {}

    // 5. Parse the CSV file with appropriate delimiter
    block CSVParser oftype CSVInterpreter {
        delimiter: ";";
    }

    // 6. Rename the primary column headers (first five)
    block RenamePrimaryHeaders oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer", "model", "month", "temperature"];
    }

    // 7. Add header for battery temperature
    block AddBatteryTemperatureHeader oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    // 8. Remove unnecessary columns (after column E)
    block UnnecessaryColumnsRemover oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    // 9. Validate the table structure and types
    block DataStructureValidator oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype ValidID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype ValidMonth,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // 10. Convert Celsius to Fahrenheit for temperature
    transform CelsiusToFahrenheit {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;
        FahrenheitValue: (CelsiusValue * 9/5) + 32;
    }

    block ConvertTemperatureToFahrenheit oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature"; // Overwrites original column
        uses: CelsiusToFahrenheit;
    }

    // 11. Convert Celsius to Fahrenheit for battery temperature
    block ConvertBatteryTemperatureToFahrenheit oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature"; // Overwrites original column
        uses: CelsiusToFahrenheit;
    }

    // 12. Save the processed data to SQLite database
    block SaveToSQLite oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    // Validation constraints
    constraint PositiveIdConstraint on integer:
        value > 0;

    valuetype ValidID oftype integer {
        constraints: [PositiveIdConstraint];
    }

    constraint ValidMonthRange oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    valuetype ValidMonth oftype integer {
        constraints: [ValidMonthRange];
    }
}

