pipeline GTFSStopsPipeline {

    // Pipeline Sequence
    DownloadGTFSData
        -> ExtractArchive
        -> SelectStopsFile
        -> ParseStopsText
        -> ParseStopsCSV
        -> ValidateStopsTable
        -> SaveStopsToDatabase;

    // Block 1: Download the ZIP file
    block DownloadGTFSData oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // Block 2: Extract the ZIP archive
    block ExtractArchive oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Block 3: Select the "stops.txt" file
    block SelectStopsFile oftype FilePicker {
        path: "/stops.txt";
    }

    // Block 4: Interpret raw text data
    block ParseStopsText oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // Block 5: Parse CSV file
    block ParseStopsCSV oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    // Block 6: Validate table structure and enforce constraints
    block ValidateStopsTable oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype ValidStopName,
            "stop_lat" oftype ValidGeoCoordinates,
            "stop_lon" oftype ValidGeoCoordinates,
            "zone_id" oftype ValidZoneID
        ];
    }

    // Block 7: Save the validated data into SQLite
    block SaveStopsToDatabase oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }

    // ValueType for Valid Latitude/Longitude (-90 to 90)
    valuetype ValidGeoCoordinates oftype decimal {
        constraints: [GeoRange];
    }

    constraint GeoRange oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
        lowerBoundInclusive: true;
        upperBoundInclusive: true;
    }

    // ValueType for Valid Zone ID (must be 1925)
    valuetype ValidZoneID oftype integer {
        constraints: [ZoneIDConstraint];
    }

    constraint ZoneIDConstraint on integer:
        value == 1925;

    // ValueType for Stop Names (Allow German Umlauts and Text Validation)
    valuetype ValidStopName oftype text {
        constraints: [AllowUmlauts];
    }

    constraint AllowUmlauts oftype RegexConstraint {
        regex: /^[a-zA-Z0-9äöüÄÖÜß\s,.-]+$/;
    }
}
